# ReactiveStruct demo

```elixir
Mix.install([
  {:kino, "~> 0.17.0"},
  # {:reactive_struct, github: "chgeuer/reactive_struct"}
  {:reactive_struct, path: "/home/chgeuer/src/reactive_struct"}
], force: true)
```

## Section

```elixir
defmodule Calculator do
  use ReactiveStruct, 
    allow_updating_computed_fields: true

  defstruct ~w(a0 a b sum product)a

  computed(:a, deps: [:a0], do: a0 + 1)
  
  computed(:sum, deps: [:a, :b], do: a + b)
  
  computed :product, deps: [:a, :b] do
    a * b
  end
end
```

```elixir
Calculator.mermaid()
|> Kino.Mermaid.new()
```

```elixir
Calculator.new(a0: 2, b: 3)
|> IO.inspect(label: :a)
|> Calculator.update(a0: 5)
|> IO.inspect(label: :b)  
|> Calculator.update(product: 5)
|> IO.inspect(label: :c)  
```

```elixir
defmodule Chain do
  use ReactiveStruct, allow_setting_computed_fields: false

  defstruct ~w[base base2 step1 step2 final]a

  computed(:step1, deps: 
    [:base, :base2], do: base * 2 + base2)
  computed(:step2, deps: [:step1], do: step1 + 10)
  computed(:final, deps: [:step2], do: step2 * step2)
end

Chain.new(base: 2, base2: 5)

# chain = %{final: 256} = Chain.new(base: 3)
# chain = %{final: 400} = Chain.up
# date(chain, base: 5)

# Chain.update(chain, step2: 5)

# Kino.Mermaid.new(Chain.mermaid())
```
